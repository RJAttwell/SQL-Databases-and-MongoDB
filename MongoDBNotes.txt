MongoDB Notes:

- NoSQL Database
- When installing, make sure the package is MSI (installation wizard)


- VIM:
    - vim [file name] to activate Vim 
    - Type in 'i' ti begin the INSERT mode 
    - Can find written installation for MongoDB on their website 
    - Check MongoDB version by typing in 'mongod --version'
    - May have to add in both vim and MongoDB paths to PATH section in environment variables

- One of the first things you should do with a new database is research how to perform CRUD with it 
- https://www.mongodb.com/docs/manual/crud/

- Typing mongod into terminal will start a local server 
- Make new tab in hyper terminal as you cannot type in the server tab 
- Type in mongosh (mongo does not work with the shell anymore. You will have to download the mongosh shell - https://www.mongodb.com/try/download/shell)
- Can type in help to get list of commands
- We will use "show dbs" that will show 3 databases that come with MongoDB (admin, config and local)
- If you want to see what database you are working in, simply type 'db'

CRUD in MongoDB:

- CREATE:
    - CREATE or INSERT operations in MongoDB will add new documents to a collection
    - Collections are like tables in SQL (a collection of documents)
    - A document is a single data record 
    - To create a collection, use 'db.[collection name].insertOne()
    - Inside the method insertOne, a JavaScript object is parsed over 
    - Example: db.products.insertOne({_id: 1, name: "Pen", price: 1.20})
    - To view collections, type 'show collections'
    - Can also use insertMany to insert multiple documents into a collection

- READ:
    - Read operations retrieve documents from a collection 
    - Use 'db.[collection name].find()
    - Inside find, we parse in a query criteria (using query selectors) in order to narrow down the data we get back
    - Example: db.products.find({name: "Pencil"}) will only bring me the data where the 'name' field matches the query criteria ('pencil')
    - Example 2: If we wanted to find products which has a price of more than $1, we can use db.products.find({price: {$gt: 1}}) and it'll return every data line with a price greater than 1
    - There is a second parameter called 'projection' which is optional 
    - Example: If we only want the name from the line of data, we'd use db.products.find({_id: 1}, {name: 1})
    - 1 is TRUE and 0 is FALSE 

- UPDATE:
    - 'db.products.updateOne()'
    - Example: db.products.updateOne({_id: 1}, {$set: {stock: 32}})

- DELETE:
    - Remove documents from a collection 
    - db.[collection name].deleteOne()
    - Can also delete several documents with 'db.[collection name].deleteMany()'

MongoDB with Node.JS:

- Need a specific MongoDB driver for the language your application is using 
- Go to 'https://www.mongodb.com/docs/drivers/'
- In terminal, use 'npm i mongodb' 